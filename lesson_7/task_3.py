# Реализовать программу работы с органическими клетками, состоящими из ячеек.
# Необходимо создать класс Клетка. В его конструкторе инициализировать параметр,
# соответствующий количеству ячеек клетки (целое число).
# В классе должны быть реализованы методы перегрузки арифметических операторов:
# сложение (__add__()), вычитание (__sub__()), умножение (__mul__()), деление (__truediv__()).
# Данные методы должны применяться только к клеткам и выполнять увеличение, уменьшение,
# умножение и целочисленное (с округлением до целого) деление клеток, соответственно.
# Сложение. Объединение двух клеток.
# При этом число ячеек общей клетки должно равняться сумме ячеек исходных двух клеток.
# Вычитание. Участвуют две клетки. Операцию необходимо выполнять только если разность количества ячеек
# двух клеток больше нуля, иначе выводить соответствующее сообщение.
# Умножение. Создается общая клетка из двух.
# Число ячеек общей клетки определяется как произведение количества ячеек этих двух клеток.
# Деление. Создается общая клетка из двух.
# Число ячеек общей клетки определяется как целочисленное деление количества ячеек этих двух клеток.
# В классе необходимо реализовать метод make_order(), принимающий экземпляр класса и количество ячеек в ряду.
# Данный метод позволяет организовать ячейки по рядам.
# Метод должен возвращать строку вида *****\n*****\n*****..., где количество ячеек между \n равно переданному аргументу.
# Если ячеек на формирование ряда не хватает, то в последний ряд записываются все оставшиеся.
# Например, количество ячеек клетки равняется 12, количество ячеек в ряду — 5.
# Тогда метод make_order() вернет строку: *****\n*****\n**.
# Или, количество ячеек клетки равняется 15, количество ячеек в ряду — 5.
# Тогда метод make_order() вернет строку: *****\n*****\n*****.

class Сage:
    def __init__(self, count):
        try:
            self._count = int(count)
        except TypeError:
            print('Error type count, need "int"')

    def __add__(self, other):
        self._count = self._count // other._count
        return self

    def __sub__(self, other):
        if self._count > other._count and other.__class__.__name__ == 'Сage':
            self._count = self._count - other._count
            return self
        else:
            return 'Error sub cage'

    def __mul__(self, other):
        self._count = self._count * other._count
        return self

    def __truediv__(self, other):
        self._count = self._count // other._count
        return self

    def make_order(self, count_line):
        line, tail = self._count // count_line, self._count % count_line
        # return '\n'.join(['*' * count_line] * line + (['*' * tail] if tail > 0 else []))
        return '\n'.join(['*' * count_line for _ in range(0, line)] + ['*' * tail])


if __name__ == '__main__':
    cage_1 = Сage(2)
    cage_2 = Сage(6)

    print(f'sum {cage_1 + cage_2}')
    print(f'difference {cage_1 - cage_2}')
    print(f'composition {cage_1 * cage_2}')
    print(f'quotient {cage_1 / cage_2}')

    big_cage = cage_1 * cage_2
    print(big_cage.make_order(5))

